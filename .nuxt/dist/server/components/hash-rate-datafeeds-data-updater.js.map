{"version":3,"file":"components/hash-rate-datafeeds-data-updater.js","sources":["webpack:///./components/HashRate/datafeeds/dataUpdater.js"],"sourcesContent":["/**\n * 数据更新器\n * 通过更新器触发datafeeds的getBars实时更新图表数据\n */\nclass dataUpdater {\n  constructor(datafeeds, vue) {\n    this.self = vue;\n    this.subscribers = {};\n    this.requestsPending = 0;\n    this.historyProvider = datafeeds;\n  }\n  subscribeBars(symbolInfo, resolution, newDataCallback, listenerGuid) {\n    if (this.self.interval == '4hour' || resolution == '240') {\n      resolution = '240'\n    }\n    if (this.self.interval == '1day' || resolution == '1day') {\n      resolution = '1D'\n    }\n    if (this.self.interval == '1week' || resolution == '1week' || this.self.interval == '10080' || resolution == '10080') {\n      resolution = '10080'\n    }\n    if (this.self.interval == '1mon' || resolution == '1mon' || this.self.interval == '43200' || resolution == '43200') {\n      resolution = '43200'\n    }\n    this.subscribers[listenerGuid] = {\n      lastBarTime: null,\n      listener: newDataCallback,\n      resolution: resolution,\n      symbolInfo: symbolInfo\n    };\n  }\n  unsubscribeBars(listenerGuid) {\n    delete this.subscribers[listenerGuid];\n  }\n  updateData() {\n    //如果等于2就说明是需要加载一次性数据的那么就需要重置为0继续进行数据更新订阅\n    // console.log(this.self.symbol, this.self.interval)\n    // console.log(this.subscribers);\n    if (this.self.connState == 2) {\n      this.requestsPending = 0;\n    }\n    if (this.requestsPending) return;\n    this.requestsPending = 0;\n    for (let listenerGuid in this.subscribers) {\n      this.requestsPending++;\n      this.updateDataForSubscriber(listenerGuid)\n        .then(() => this.requestsPending--)\n        .catch(() => this.requestsPending--);\n    }\n  }\n  updateDataForSubscriber(listenerGuid) {\n    return new Promise((resolve, reject) => {\n      const subscriptionRecord = this.subscribers[listenerGuid];\n      const rangeEndTime = parseInt((Date.now() / 1000).toString());\n      const rangeStartTime =\n        rangeEndTime -\n        this.periodLengthSeconds(subscriptionRecord.resolution, 10);\n      this.historyProvider.getBars(\n        subscriptionRecord.symbolInfo,\n        subscriptionRecord.resolution,\n        rangeStartTime,\n        rangeEndTime,\n        bars => {\n          this.onSubscriberDataReceived(listenerGuid, bars);\n          resolve();\n        },\n        () => {\n          reject();\n        }\n      );\n    });\n  }\n  onSubscriberDataReceived(listenerGuid, bars) {\n    if (!this.subscribers.hasOwnProperty(listenerGuid)) return;\n    if (!bars.length) return;\n    const lastBar = bars[bars.length - 1];\n    const subscriptionRecord = this.subscribers[listenerGuid];\n    if (\n      subscriptionRecord.lastBarTime !== null &&\n      lastBar.time < subscriptionRecord.lastBarTime\n    )\n      return;\n    const isNewBar =\n      subscriptionRecord.lastBarTime !== null &&\n      lastBar.time > subscriptionRecord.lastBarTime;\n    if (isNewBar) {\n      if (bars.length < 2) {\n        throw new Error(\n          \"Not enough bars in history for proper pulse update. Need at least 2.\"\n        );\n      }\n\n      const previousBar = bars[bars.length - 2];\n      subscriptionRecord.listener(previousBar);\n    }\n    subscriptionRecord.lastBarTime = lastBar.time;\n    subscriptionRecord.listener(lastBar);\n  }\n  periodLengthSeconds(resolution, requiredPeriodsCount) {\n    let daysCount = 0;\n    if (resolution == \"240\") {\n      daysCount = requiredPeriodsCount / 6;\n    } else if (resolution === \"D\" || resolution === \"1D\") {\n      daysCount = requiredPeriodsCount;\n    } else if (resolution === \"M\" || resolution === \"1M\" || resolution == '43200') {\n      daysCount = 31 * requiredPeriodsCount;\n    } else if (resolution === \"W\" || resolution === \"1W\" || resolution == '10080') {\n      daysCount = 7 * requiredPeriodsCount;\n    } else {\n      daysCount = (requiredPeriodsCount * parseInt(resolution)) / (24 * 60);\n    }\n    return daysCount * 24 * 60 * 60;\n  }\n}\n\nexport default dataUpdater;\n"],"mappings":";;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7GA;AACA;AA8GA;;;;A","sourceRoot":""}