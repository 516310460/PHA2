{"version":3,"file":"components/hash-rate-datafeeds-datafees.js","sources":["webpack:///./components/HashRate/datafeeds/dataUpdater.js","webpack:///./components/HashRate/datafeeds/datafees.js"],"sourcesContent":["/**\n * 数据更新器\n * 通过更新器触发datafeeds的getBars实时更新图表数据\n */\nclass dataUpdater {\n  constructor(datafeeds, vue) {\n    this.self = vue;\n    this.subscribers = {};\n    this.requestsPending = 0;\n    this.historyProvider = datafeeds;\n  }\n  subscribeBars(symbolInfo, resolution, newDataCallback, listenerGuid) {\n    if (this.self.interval == '4hour' || resolution == '240') {\n      resolution = '240'\n    }\n    if (this.self.interval == '1day' || resolution == '1day') {\n      resolution = '1D'\n    }\n    if (this.self.interval == '1week' || resolution == '1week' || this.self.interval == '10080' || resolution == '10080') {\n      resolution = '10080'\n    }\n    if (this.self.interval == '1mon' || resolution == '1mon' || this.self.interval == '43200' || resolution == '43200') {\n      resolution = '43200'\n    }\n    this.subscribers[listenerGuid] = {\n      lastBarTime: null,\n      listener: newDataCallback,\n      resolution: resolution,\n      symbolInfo: symbolInfo\n    };\n  }\n  unsubscribeBars(listenerGuid) {\n    delete this.subscribers[listenerGuid];\n  }\n  updateData() {\n    //如果等于2就说明是需要加载一次性数据的那么就需要重置为0继续进行数据更新订阅\n    // console.log(this.self.symbol, this.self.interval)\n    // console.log(this.subscribers);\n    if (this.self.connState == 2) {\n      this.requestsPending = 0;\n    }\n    if (this.requestsPending) return;\n    this.requestsPending = 0;\n    for (let listenerGuid in this.subscribers) {\n      this.requestsPending++;\n      this.updateDataForSubscriber(listenerGuid)\n        .then(() => this.requestsPending--)\n        .catch(() => this.requestsPending--);\n    }\n  }\n  updateDataForSubscriber(listenerGuid) {\n    return new Promise((resolve, reject) => {\n      const subscriptionRecord = this.subscribers[listenerGuid];\n      const rangeEndTime = parseInt((Date.now() / 1000).toString());\n      const rangeStartTime =\n        rangeEndTime -\n        this.periodLengthSeconds(subscriptionRecord.resolution, 10);\n      this.historyProvider.getBars(\n        subscriptionRecord.symbolInfo,\n        subscriptionRecord.resolution,\n        rangeStartTime,\n        rangeEndTime,\n        bars => {\n          this.onSubscriberDataReceived(listenerGuid, bars);\n          resolve();\n        },\n        () => {\n          reject();\n        }\n      );\n    });\n  }\n  onSubscriberDataReceived(listenerGuid, bars) {\n    if (!this.subscribers.hasOwnProperty(listenerGuid)) return;\n    if (!bars.length) return;\n    const lastBar = bars[bars.length - 1];\n    const subscriptionRecord = this.subscribers[listenerGuid];\n    if (\n      subscriptionRecord.lastBarTime !== null &&\n      lastBar.time < subscriptionRecord.lastBarTime\n    )\n      return;\n    const isNewBar =\n      subscriptionRecord.lastBarTime !== null &&\n      lastBar.time > subscriptionRecord.lastBarTime;\n    if (isNewBar) {\n      if (bars.length < 2) {\n        throw new Error(\n          \"Not enough bars in history for proper pulse update. Need at least 2.\"\n        );\n      }\n\n      const previousBar = bars[bars.length - 2];\n      subscriptionRecord.listener(previousBar);\n    }\n    subscriptionRecord.lastBarTime = lastBar.time;\n    subscriptionRecord.listener(lastBar);\n  }\n  periodLengthSeconds(resolution, requiredPeriodsCount) {\n    let daysCount = 0;\n    if (resolution == \"240\") {\n      daysCount = requiredPeriodsCount / 6;\n    } else if (resolution === \"D\" || resolution === \"1D\") {\n      daysCount = requiredPeriodsCount;\n    } else if (resolution === \"M\" || resolution === \"1M\" || resolution == '43200') {\n      daysCount = 31 * requiredPeriodsCount;\n    } else if (resolution === \"W\" || resolution === \"1W\" || resolution == '10080') {\n      daysCount = 7 * requiredPeriodsCount;\n    } else {\n      daysCount = (requiredPeriodsCount * parseInt(resolution)) / (24 * 60);\n    }\n    return daysCount * 24 * 60 * 60;\n  }\n}\n\nexport default dataUpdater;\n","/**\n * JS API\n */\nimport dataUpdater from './dataUpdater'\nclass datafeeds {\n  /**\n   * JS API\n   * @param {*Object} vue vue实例\n   */\n  constructor(vue) {\n    this.self = vue\n    this.barsUpdater = new dataUpdater(this, vue)\n  }\n\n  /**\n   * @param {*Function} callback  回调函数\n   * `onReady` should return result asynchronously.\n   */\n  onReady(callback) {\n    return new Promise((resolve, reject) => {\n      let configuration = this.defaultConfiguration()\n      if (this.self.getConfig) {\n        configuration = Object.assign(\n          this.defaultConfiguration(),\n          this.self.getConfig()\n        )\n      }\n      resolve(configuration)\n    }).then(data => callback(data))\n  }\n\n  /**\n   * @param {*String} symbolName  商品名称或ticker\n   * @param {*Function} onSymbolResolvedCallback 成功回调\n   * @param {*Function} onResolveErrorCallback   失败回调\n   * `resolveSymbol` should return result asynchronously.\n   */\n  resolveSymbol(symbolName, onSymbolResolvedCallback, onResolveErrorCallback) {\n    return new Promise((resolve, reject) => {\n        let symbolInfo = this.defaultSymbol()\n        if (this.self.getSymbol) {\n          symbolInfo = Object.assign(this.defaultSymbol(), this.self.getSymbol())\n        }\n        resolve(symbolInfo)\n      })\n      .then(data => onSymbolResolvedCallback(data))\n      .catch(err => onResolveErrorCallback(err))\n  }\n\n  /**\n   * @param {*Object} symbolInfo  商品信息对象\n   * @param {*String} resolution  分辨率\n   * @param {*Number} rangeStartDate  时间戳、最左边请求的K线时间\n   * @param {*Number} rangeEndDate  时间戳、最右边请求的K线时间\n   * @param {*Function} onDataCallback  回调函数\n   * @param {*Function} onErrorCallback  回调函数\n   */\n  getBars(\n    symbolInfo,\n    resolution,\n    rangeStartDate,\n    rangeEndDate,\n    onDataCallback,\n    onErrorCallback\n  ) {\n    if (this.self.interval == '4hour' || resolution == '240') {\n      resolution = '240'\n    }\n    if (this.self.interval == '1day' || resolution == '1day') {\n      resolution = '1D'\n    }\n    if (this.self.interval == '1week' || resolution == '1week' || this.self.interval == '10080' || resolution == '10080') {\n      resolution = '10080'\n    }\n    if (this.self.interval == '1mon' || resolution == '1mon' || this.self.interval == '43200' || resolution == '43200') {\n      resolution = '43200'\n    }\n    const onLoadedCallback = data => {\n      data && data.length ?\n        onDataCallback(data, {\n          noData: true\n        }) :\n        onDataCallback([], {\n          noData: true\n        })\n    }\n    this.self.getBars(\n      symbolInfo,\n      resolution,\n      rangeStartDate,\n      rangeEndDate,\n      onLoadedCallback\n    )\n  }\n\n  /**\n   * 订阅K线数据。图表库将调用onRealtimeCallback方法以更新实时数据\n   * @param {*Object} symbolInfo 商品信息\n   * @param {*String} resolution 分辨率\n   * @param {*Function} onRealtimeCallback 回调函数\n   * @param {*String} subscriberUID 监听的唯一标识符\n   * @param {*Function} onResetCacheNeededCallback (从1.7开始): 将在bars数据发生变化时执行\n   */\n  subscribeBars(\n    symbolInfo,\n    resolution,\n    onRealtimeCallback,\n    subscriberUID,\n    onResetCacheNeededCallback\n  ) {\n    //订阅的使用 this.self.interval 当前时间类型来做判断\n    if (this.self.interval == '4hour' || resolution == '240') {\n      resolution = '240'\n    }\n    if (this.self.interval == '1day' || resolution == '1day') {\n      resolution = '1D'\n    }\n    if (this.self.interval == '1week' || resolution == '1week' || this.self.interval == '10080' || resolution == '10080') {\n      resolution = '10080'\n    }\n    if (this.self.interval == '1mon' || resolution == '1mon' || this.self.interval == '10080' || resolution == '10080') {\n      resolution = '43200'\n    }\n    // 如果resolution为空就代表this.self.interval已经是1D、1W、1M\n    // if (subscriberUID.split('_')[1] == 'D') {\n    //   subscriberUID = subscriberUID.split('_')[0]\n    //   subscriberUID = `${subscriberUID}_${resolution}`\n    // }\n    if (!resolution) {\n      resolution = this.self.oldInterval\n      subscriberUID = subscriberUID.split('_')[0]\n      subscriberUID = `${subscriberUID}_${resolution}`\n    } else if (subscriberUID.split('_')[1] == 'D') {\n      subscriberUID = subscriberUID.split('_')[0]\n      subscriberUID = `${subscriberUID}_${resolution}`\n      // } else {\n      //   subscriberUID = subscriberUID.split('_')[0]\n      //   subscriberUID = `${subscriberUID}_${resolution}`\n    }\n    this.barsUpdater.subscribeBars(\n      symbolInfo,\n      resolution,\n      onRealtimeCallback,\n      subscriberUID,\n      onResetCacheNeededCallback\n    )\n  }\n\n  /**\n   * 取消订阅K线数据\n   * @param {*String} subscriberUID 监听的唯一标识符\n   */\n  unsubscribeBars(subscriberUID) {\n    let resolution = null\n    //订阅的使用 this.self.oldInterval 上一个时间类型来做判断\n    if (this.self.oldInterval == '4hour' || this.self.oldInterval == '240') {\n      resolution = '240'\n    }\n    if (this.self.oldInterval == '1day' || this.self.oldInterval == '1D') {\n      resolution = '1D'\n    }\n    if (this.self.oldInterval == '1week' || this.self.oldInterval == '1W' || this.self.oldInterval == '10080') {\n      resolution = '10080'\n    }\n    if (this.self.oldInterval == '1mon' || this.self.oldInterval == '1M' || this.self.oldInterval == '43200') {\n      resolution = '43200'\n    }\n    // 如果resolution为空就代表this.self.interval已经是1D、1W、1M\n    // console.log('需要取消订阅的标识符', subscriberUID, this.self.interval)\n    // if (subscriberUID.split('_')[1] == 'D') {\n    //   subscriberUID = subscriberUID.split('_')[0]\n    //   subscriberUID = `${subscriberUID}_${resolution}`\n    // }\n    if (!resolution) {\n      resolution = this.self.oldInterval\n      subscriberUID = subscriberUID.split('_')[0]\n      subscriberUID = `${subscriberUID}_${resolution}`\n    } else if (subscriberUID.split('_')[1] == 'D') {\n      subscriberUID = subscriberUID.split('_')[0]\n      subscriberUID = `${subscriberUID}_${resolution}`\n      // } else {\n      //   subscriberUID = subscriberUID.split('_')[0]\n      //   subscriberUID = `${subscriberUID}_${resolution}`\n    }\n    this.barsUpdater.unsubscribeBars(subscriberUID)\n  }\n\n  /**\n   * 默认配置\n   */\n  defaultConfiguration() {\n    return {\n      supports_search: true,\n      supports_group_request: false,\n      supported_resolutions: [\n        '1',\n        '5',\n        '15',\n        '30',\n        '60',\n        '240',\n        '10080',\n        '43200',\n        '1D',\n        '2D',\n        '3D',\n        '1W',\n        '1M'\n      ],\n      supports_marks: true,\n      supports_timescale_marks: true,\n      supports_time: true\n    }\n  }\n\n  /**\n   * 默认商品信息\n   */\n  defaultSymbol() {\n    return {\n      name: this.self.symbol.toLowerCase(),\n      timezone: 'Asia/Shanghai',\n      minmov: 1,\n      minmov2: 0,\n      pointvalue: 1,\n      fractional: false,\n      session: '24x7',\n      has_intraday: true,\n      has_no_volume: false,\n      description: this.self.symbol.toLowerCase(),\n      pricescale: Number(this.self.pricescale) ? Number(this.self.pricescale) : 100, // 精度，100是2位小数\n      ticker: this.self.symbol.toLowerCase(),\n      supported_resolutions: [\n        '1',\n        '5',\n        '15',\n        '30',\n        '60',\n        '240',\n        '10080',\n        '43200',\n        '1D',\n        '2D',\n        '3D',\n        '1W',\n        '1M'\n      ]\n    }\n  }\n}\n\nexport default datafeeds\n"],"mappings":";;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7GA;AACA;AA8GA;;;;;;;;ACnHA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AADA;AAGA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AApBA;AAsBA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAbA;AA6BA;AACA;AArPA;AACA;AAsPA;;;;A","sourceRoot":""}